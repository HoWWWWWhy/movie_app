{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenres","_ref2","genres","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","rating","synopsis","map","genre","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAsCA,SAASA,EAATC,GAA+B,IAATC,EAASD,EAATC,OACpB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,EAAhC,OAIJ,SAASK,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC5B,OACEP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKJ,UAAU,iBAqBvCO,MA3Df,SAAAC,GAA2D,IAA1CF,EAA0CE,EAA1CF,MAAOH,EAAmCK,EAAnCL,OAAQM,EAA2BD,EAA3BC,OAAQb,EAAmBY,EAAnBZ,OAAQc,EAAWF,EAAXE,SAC9C,OAGEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAEpCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,UAAKO,GACLT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,WACWS,GAEXZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,WACWJ,EAAOe,IAAI,SAACC,EAAOC,GAAR,OAAkBhB,EAAAC,EAAAC,cAACL,EAAD,CAAaE,OAAQgB,EAAOE,IAAKD,OAEzEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACEkB,KAAMN,EACNO,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCgFLC,6MA/FbC,MAAQ,KAYRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEUC,EAAKC,WAFf,OAELP,EAFKG,EAAAK,KAIXF,EAAKG,SAAS,CACVT,WALO,wBAAAG,EAAAO,SAAAX,QASbQ,SAAW,WACT,OAAOI,MAAM,yDACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QA+B5BG,cAAgB,WAWd,OAVed,EAAKT,MAAMG,OAAOd,IAAI,SAAAmC,GAEnC,OADAH,QAAQC,IAAIE,GACLjD,EAAAC,EAAAC,cAACgD,EAAD,CACPzC,MAAOwC,EAAME,cACbvC,OAAQqC,EAAMrC,OACdN,OAAQ2C,EAAMG,mBACdrD,OAAQkD,EAAMlD,OACdc,SAAUoC,EAAMpC,SAChBI,IAAKgC,EAAMI,2FAxDbC,KAAK5B,8CA8DE,IACAE,EAAU0B,KAAK7B,MAAfG,OACP,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAWyB,EAAS,MAAQ,eAE9BA,EAAS0B,KAAKN,gBAAkB,kBAnFvBO,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.97e918b5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\n// smart component: state component, class component\n// dumb component: stateless, props만 존재, function component, return을 위한..., render function 및 lifecycle도 없음\n\nfunction Movie ({title, poster, rating, genres, synopsis}) {\n  return (\n    // JSX에서는 class -> className\n    // https://www.npmjs.com/package/react-lines-ellipsis\n    <div className=\"Movie\">\n      <div className=\"Movie_Columns Poster\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className=\"Movie_Columns Article\">\n        <h1>{title}</h1>\n        <div className=\"Movie_Rating\">\n          Rating: {rating}\n        </div>\n        <div className=\"Movie_Genres\">\n          Genres: {genres.map((genre, index) => <MovieGenres genres={genre} key={index} />)}\n        </div>\n        <div className=\"Movie_Synopsis\">\n          <LinesEllipsis\n            text={synopsis}\n            maxLine='3'\n            ellipsis='...'\n            trimRight\n            basedOn='letters'\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MovieGenres({genres}) {\n  return (\n    <span className=\"Movie_Genres\">{genres} / </span>\n  )\n}\n\nfunction MoviePoster({poster, alt}) {\n  return (\n    <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\" />\n  )\n}\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired,\n  genres: PropTypes.string.isRequired,\n  synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n}\n\nMovieGenres.propTypes = {\n  genres: PropTypes.string.isRequired\n}\n\nexport default Movie;\n\n/*\n\nclass MoviePoster extends Component {\n  /*checking to see if we have the correct type of prop (부모 컴포넌트에게서 받는 정보 체크)\n  .string: 해당 prop type이 string이어야 할 때\n  .isRequired: 해당 prop가 필수인 경우\n\n  static propTypes = {\n    poster: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired\n  }\n\n  render() {\n    return (\n      <img src={this.props.poster} alt={this.props.description} />\n    );\n  }\n}\n*/\n","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Movie from './Movie';\n\n// 참고페이지: https://nomadcoders.github.io/movie_app/\n\nclass App extends Component {\n  // Lifecycle\n  // Render: componentWillMount() -> render() -> componentDidMount() -----> 컴포넌트가 존재하기 시작할 때 이 순서로 작동\n  // Update componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n  // -----> 컴포넌트는 old props와 new props를 비교해 달라지면 업데이트를 해야한다고 판단 후 render 후 업데이트 완료\n\n  //default state\n  state = {\n\n  };\n\n  // fetch: url을 ajax로 아주 간단하게 불러올 수 있음\n  // promise: asynchronous\n  // 현재 스케쥴이 끝나기 전에 다른 코드 실행, 서로 상관없이 수행\n  // 2가지 시나리오를 관리. .then(): 실행 성공 시, .catch(): 실행 실패 시\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _getMovies = async () => {\n    //await: 현재 작업이 (성공이든 실패든)끝날 때까지 다음 작업 수행하지 않음\n    const movies = await this._callApi()\n    //console.log(movies)\n    this.setState({\n        movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n/* This is not real DB\n  componentDidMount() {\n    // setTimeout(fn, 1000)\n    setTimeout(() => {\n      this.setState({\n        movies: [\n          {\n            title: \"Life Is Beautiful\",\n            poster: \"http://www.asset1.net/tv/pictures/160/237/movie/life-is-beautiful-1998/KA-LifeIsBeautiful.jpg\"\n          },\n          {\n            title: \"Dead Poets Society\",\n            poster: \"http://twelvebytwelve.net/dps-images/dps-03-poster-173x247.jpg\"\n          },\n          {\n            title: \"Goodbye My Friend\",\n            poster: \"http://mblogthumb4.phinf.naver.net/20140120_195/jcp0909_13902082153112nWi7_JPEG/movie_image.jpg?type=w2\"\n          },\n          {\n            title: \"The Truman Show\",\n            poster: \"https://upload.wikimedia.org/wikipedia/en/c/cd/Trumanshow.jpg\"\n          }\n        ]\n\n      })\n    }, 5000)// 5초 후에\n  }\n*/\n  // user function을 구별하기 위해 _로 시작(니콜라스 방법)\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      console.log(movie)\n      return <Movie\n      title={movie.title_english}\n      rating={movie.rating}\n      poster={movie.medium_cover_image}\n      genres={movie.genres}\n      synopsis={movie.synopsis}\n      key={movie.id} />\n    })\n    return movies\n  }\n\n  // component 안의 state가 바뀔 때마다, render 발생 with the new state\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {/* state에 데이터가 없을 경우 Loading 표시*/}\n        {movies ? this._renderMovies() : 'Loading'}\n        {/*array.map(element, index): index는 0부터 시작\n          array의 각 child는 고유의 \"key\" prop을 가져야 함\n\n        {this.state.movies.map((movie, index) => {\n          return <Movie title={movie.title} poster={movie.poster} key={index} />\n        })}*/}\n        {/* JSX에서 Component 하위 내용인 경우 주석 처리 시 {} 사용\n          Hello\n          <Movie title={movieTitles[0]} poster={movieImages[0]} />\n          <Movie title={movieTitles[1]} poster={movieImages[1]} />\n          <Movie title={movieTitles[2]} poster={movieImages[2]} />\n          <Movie title={movieTitles[3]} poster={movieImages[3]} />\n        */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}